# Internship Task 6 — Password Strength Evaluation

**Analyst:** Avinash Patwal  
**Date:** 2025-09-26  
**Task:** Create multiple passwords and evaluate strength using online password strength checkers.

---

## 1. Objective
To understand what makes a password strong and to evaluate several passwords using a password strength checker. The goal is to learn best practices and summarize how password complexity affects resistance to common attacks.

---

## 2. Tools used
- Password strength checker: https://www.passwordmeter.com/  
- Optional secondary check: zxcvbn (demo)  
- Screenshots taken with Windows Snip Tool (Win + Shift + S)

---

## 3. Passwords created (examples — DO NOT USE THESE)
| Label | Example password (demo) | Length | Char types (lower/upper/num/symbol) | Example assessment |
|---|---:|---:|---:|---|
| PW1 (very weak) | `password` | 8 | lower | Very weak — common dictionary word |
| PW2 (weak) | `Summer2025` | 10 | lower + Upper + digits | Weak — predictable (season + year) |
| PW3 (weak/moderate) | `P@ssw0rd123` | 11 | lower+upper+digits+symbol | Moderate — common pattern with leetspeak |
| PW4 (moderate) | `BlueCar$99` | 9 | lower+Upper+digits+symbol | Moderate |
| PW5 (moderate) | `Tr0ub4dor&3` | 11 | mixed | Moderate-Strong |
| PW6 (strong) | `7uN3$!kL9b#` | 11 | random mix | Strong (random chars) |
| PW7 (passphrase) | `MyDogRexIsCute!` | 16 | mixed + readable | Strong (passphrase with punctuation) |
| PW8 (very strong/passphrase) | `CorrectHorseBatteryStaple!2025` | 29 | mixed + long | Very Strong (long passphrase)

> Note: These are demonstration passwords. For real accounts use unique, randomly-generated passwords or a long passphrase.

---

## 4. Methodology
1. Created passwords with different patterns (dictionary words, predictable patterns, mixed chars, random chars, passphrases).  
2. For each password, tested on **passwordmeter.com** and noted:
   - Score / strength feedback (e.g., “Very Weak”, “Weak”, “Strong”)  
   - Specific recommendations (e.g., add length, add symbols, avoid dictionary words).  
3. Captured screenshots of each test (saved under `screenshots/`).  
4. Compiled results into `results.csv`.

---

## 5. Example results (sample — replace with your exact screenshots/scores)
| Label | Score (example) | Feedback summary | Recommendation |
|---|---:|---|---|
| PW1 `password` | 5/100 (Very Weak) | Common word, easily guessed | Use entirely different phrase, much longer |
| PW2 `Summer2025` | 22/100 (Weak) | Predictable, year added | Increase length, add symbols & randomness |
| PW3 `P@ssw0rd123` | 35/100 (Weak/Moderate) | Patterned, digits appended | Avoid common patterns, add more randomness |
| PW4 `BlueCar$99` | 47/100 (Moderate) | Contains word patterns | Prefer longer passphrase or truly random chars |
| PW5 `Tr0ub4dor&3` | 62/100 (Moderate-Strong) | Leetspeak helps but still patterned | Make longer and less dictionary-like |
| PW6 `7uN3$!kL9b#` | 78/100 (Strong) | Random mix — good entropy | Good; store in password manager |
| PW7 `MyDogRexIsCute!` | 85/100 (Strong) | Passphrase-style — memorable & long | Great; consider making slightly longer |
| PW8 `CorrectHorseBatteryStaple!2025` | 95/100 (Very Strong) | Long passphrase — high entropy | Excellent — recommended format

*(These numeric scores are example values based on typical password checkers. Run the checks yourself and replace the numbers / screenshots.)*

Screenshots (place under `screenshots/`):
- `pw_test_1_password.png`  
- `pw_test_2_Summer2025.png`  
- ... etc.

---

## 6. Analysis & Learning
- **Length matters most.** Each added character multiplies the possible combinations; longer passwords (≥ 16 characters) dramatically increase time to brute-force.  
- **Character variety helps.** Using upper, lower, digits, and symbols increases entropy per character.  
- **Avoid dictionary words & common patterns.** Attackers use dictionary lists and pattern rules (e.g., `Password1`, `Summer2025`) in dictionary attacks.  
- **Passphrases are effective.** A long phrase of unrelated words (with occasional punctuation/digits) balances memorability and strength.  
- **Random strings** (generated by a good password manager) provide high entropy but are harder to memorize — store them in a manager.

---

## 7. Common password attacks (short)
- **Brute-force attack:** Attacker tries every possible combination — time grows exponentially with length and character set.  
- **Dictionary attack:** Uses a list of common passwords and words plus rules (e.g., `password` → `P@ssw0rd`).  
- **Rainbow tables:** Precomputed hashes for common passwords speed up cracking (mitigated by salts).  
- **Credential stuffing:** Reuse of leaked credentials across sites — why uniqueness matters.

---

## 8. Recommendations / Best Practices
1. Use a **password manager** (Bitwarden, 1Password, LastPass) to generate and store unique, long passwords.  
2. Prefer **passphrases** (4+ random words) or random 16+ character passwords.  
3. Enable **Multi-Factor Authentication (MFA)** wherever available.  
4. Never reuse passwords across different services.  
5. Avoid predictable substitutions (e.g., `@` for `a`) as standalone defenses.  
6. Use 2FA + recovery codes stored safely.  
7. Regularly check if your email/passwords were leaked (haveibeenpwned.com) — change if leaked.

---

## 9. Interview Q&A (short answers)
1. **What makes a password strong?** — Length (≥12–16), character variety, unpredictability, and uniqueness.  
2. **What are common password attacks?** — Brute-force, dictionary, rainbow tables, credential stuffing.  
3. **Why is password length important?** — Each additional character multiplies possibilities, dramatically increasing crack time.  
4. **What is a dictionary attack?** — Attacker tries words from a list and common variations to guess the password.  
5. **What is multi-factor authentication?** — An extra verification step (SMS/app token/biometrics) in addition to password.  
6. **How do password managers help?** — They generate, store, and autofill strong unique passwords securely.  
7. **What are passphrases?** — Long phrases made of multiple words, easier to remember and strong when sufficiently long.  
8. **Common mistakes?** — Reusing passwords, short passwords, using dictionary words, predictable patterns.

---

## 10. Files to submit
- `report.md` (this file)  
- `results.csv` (table of passwords + scores)  
- `README.md`  
- `screenshots/` (all password test screenshots)

---

## 11. Conclusion
Creating long, unique passwords (ideally via a password manager) and enabling MFA are the most practical defenses. This exercise shows how much strength improves with length and randomness.

